var app, appUrl;

if (window.location.host === 'localhost:4000') {
  appUrl = 'https://tracka-keepa-dev.firebaseio.com';
} else {
  appUrl = window.location.host;
}

app = angular.module('trackaKeepa', ['firebase']);

app.constant('Modernizr', Modernizr);

window.console = window.console || {};

window.console.log = window.console.log || function() {};

$(function() {
  return $("a[href='#']").click(function(e) {
    return e.preventDefault();
  });
});

app.directive('loginForm', [
  function() {
    return {
      restrict: 'A',
      scope: true,
      link: function(scope, element, attrs) {
        scope.user = {
          email: null,
          password: null
        };
        return scope.submit = function() {
          return console.log(scope.user);
        };
      }
    };
  }
]);

app.directive('registerForm', [
  '$firebaseAuth', function($firebaseAuth) {
    return {
      restrict: 'A',
      scope: true,
      link: function(scope, element, attrs) {
        var auth, ref;
        ref = new Firebase(appUrl);
        auth = $firebaseAuth(ref);
        scope.user = {
          email: null,
          password: null
        };
        return scope.submit = function() {
          return auth.$createUser({
            email: scope.user.email,
            password: scope.user.password
          }).then(function(userData) {
            console.log("Successfully created user account: " + userData.uid);
            return $('[flash]').text('Account successfully created');
          })["catch"](function(error) {
            return console.log("Error creating user: " + error);
          });
        };
      }
    };
  }
]);

app.directive('tabSet', [
  'Tab', function(Tab) {
    return {
      restrict: 'A',
      scope: true,
      link: function(scope, element, attrs) {
        return scope.tabSet = Tab.newTabSet();
      }
    };
  }
]);

app.directive('tabToggle', [
  'Tab', function(Tab) {
    return {
      restrict: 'A',
      link: function(scope, element, attrs) {
        angular.element(element).bind('click', function() {
          if (!$(element).is('[tab-active]')) {
            return Tab.toggleTab({
              id: scope.tabSet,
              tabbed: attrs.tabToggle
            });
          }
        });
        return scope.$on('tabToggle', function(ev, val) {
          if (scope.tabSet === val.id) {
            if (attrs.tabToggle === val.tabbed) {
              return $(element).attr('tab-active', '');
            } else {
              return $(element).removeAttr('tab-active');
            }
          }
        });
      }
    };
  }
]);

app.directive('tabContent', [
  function() {
    return {
      restrict: 'A',
      link: function(scope, element, attrs) {
        var closeTab, openTab;
        openTab = function() {
          return $(element).attr('tab-active', '');
        };
        closeTab = function() {
          return $(element).removeAttr('tab-active');
        };
        return scope.$on('tabToggle', function(ev, val) {
          if (scope.tabSet === val.id) {
            if (attrs.tabContent === val.tabbed) {
              return openTab();
            } else {
              return closeTab();
            }
          }
        });
      }
    };
  }
]);

app.factory('Tab', [
  '$rootScope', function($rootScope) {
    var tabSets;
    tabSets = [];
    return {
      newTabSet: function() {
        var tabSet;
        tabSet = tabSets.length + 1;
        tabSets.push({
          id: tabSet,
          tabbed: ''
        });
        return tabSet;
      },
      toggleTab: function(args) {
        var i, len, n, results;
        results = [];
        for (i = 0, len = tabSets.length; i < len; i++) {
          n = tabSets[i];
          if (n.id === args.id) {
            n.tabbed = args.tabbed;
            $rootScope.$broadcast('tabToggle', n);
            break;
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };
  }
]);

//# sourceMappingURL=data:application/json;base64,